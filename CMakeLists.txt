# CMake file for development of Commander Genius (taken from OLX)
# This CMake file is used under Linux normally. 

cmake_minimum_required(VERSION 2.4)
IF (${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION} GREATER 2.4)
	cmake_policy(SET CMP0005 OLD)
	cmake_policy(SET CMP0003 OLD)
	#include(PCHSupport_26.cmake)
ENDIF (${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION} GREATER 2.4)

	MESSAGE( "Preparing the Build-System for Commander Genius" )

# This parts detects, if we are working on a 64-bit System
IF( NOT APPLE )
	IF( CMAKE_SIZEOF_VOID_P MATCHES 4 )
	  set( HAVE_64_BIT 0 )
	ELSE( CMAKE_SIZEOF_VOID_P MATCHES 4 )
	  set( HAVE_64_BIT 1 )
	ENDIF( CMAKE_SIZEOF_VOID_P MATCHES 4 )
ENDIF( NOT APPLE )


OPTION(DEBUG "enable debug build" Yes)
OPTION(SDL "SDL support (will not work without)" Yes)
OPTION(OPENGL "OpenGL support" Yes)
OPTION(OGG "Ogg/Vorbis support" Yes)

IF (DEBUG)
	SET(CMAKE_BUILD_TYPE Debug)
ELSE (DEBUG)
	SET(CMAKE_BUILD_TYPE Release)
ENDIF (DEBUG)

# Platform specific things can be put here
# Compilers and other specific variables can be found here:
# http://www.cmake.org/Wiki/CMake_Useful_Variables

# Compilation Flags and executables
IF (BUILD_TYPE STREQUAL GP2X OR
    BUILD_TYPE STREQUAL WIZ OR
    BUILD_TYPE STREQUAL DINGOO OR
    BUILD_TYPE STREQUAL PANDORA)
	IF (BUILD_TYPE STREQUAL GP2X)
		SET(PREFIX /mythtv/media/devel/toolchains/open2x/gcc-4.1.1-glibc-2.3.6)
		SET(CMAKE_C_COMPILER ${PREFIX}/bin/arm-open2x-linux-gcc)
		SET(CMAKE_CXX_COMPILER ${PREFIX}/bin/arm-open2x-linux-g++)
		ADD_DEFINITIONS(-DGP2X)
		SET(OGG No)
	ELSEIF(BUILD_TYPE STREQUAL WIZ)
		SET(PREFIX /mythtv/media/devel/toolchains/openwiz/arm-openwiz-linux-gnu)
		SET(CMAKE_C_COMPILER ${PREFIX}/bin/arm-openwiz-linux-gnu-gcc)
		SET(CMAKE_CXX_COMPILER ${PREFIX}/bin/arm-openwiz-linux-gnu-g++)
		ADD_DEFINITIONS(-DWIZ)
		SET(OGG Yes)
	ELSEIF(BUILD_TYPE STREQUAL DINGOO)
		SET(PREFIX /opt/dingoo-uclibc-toolchain-06-17/usr)
		SET(CMAKE_C_COMPILER ${PREFIX}/bin/mipsel-linux-uclibc-gcc)
		SET(CMAKE_CXX_COMPILER ${PREFIX}/bin/mipsel-linux-uclibc-g++)
		SET(OGG No)
	ELSEIF(BUILD_TYPE STREQUAL PANDORA)
		SET(PREFIX /mythtv/media/devel/toolchains/pandora/arm-2007q3)
		SET(CMAKE_C_COMPILER ${PREFIX}/bin/arm-none-linux-gnueabi-gcc)
		SET(CMAKE_CXX_COMPILER ${PREFIX}/bin/arm-none-linux-gnueabi-g++)
		ADD_DEFINITIONS(-DPANDORA)
		SET(OGG Yes)
	ENDIF(BUILD_TYPE STREQUAL GP2X)

	SET(BUILD_TYPE LINUX32)
	SET(CMAKE_SYSTEM_NAME Linux)
	SET(CMAKE_FIND_ROOT_PATH ${PREFIX})
	SET(CMAKE_INSTALL_PREFIX ${PREFIX})
	SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
	SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
	SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
	SET(CMAKE_FIND_LIBRARY_PREFIXES lib)
	SET(CMAKE_FIND_LIBRARY_SUFFIXES .a)
	SET(OPENGL No)
	SET(CMAKE_VERBOSE_MAKEFILE ON)

	ADD_DEFINITIONS(-fsigned-char)
	ADD_DEFINITIONS(-ffast-math)
	ADD_DEFINITIONS(-fomit-frame-pointer)
	include_directories(${PREFIX}/include)
	link_directories(${PREFIX}/lib)
ENDIF (BUILD_TYPE STREQUAL GP2X OR
       BUILD_TYPE STREQUAL WIZ OR
       BUILD_TYPE STREQUAL DINGOO OR
       BUILD_TYPE STREQUAL PANDORA )

# Check wether in what system it is configured
IF(NOT HAVE_64_BIT AND BUILD_TYPE STREQUAL LINUX64)
	MESSAGE( "Warning: Building 64-bit Version on 32-bit machine is not supported!" )
ENDIF(NOT HAVE_64_BIT AND BUILD_TYPE STREQUAL LINUX64)


# Directory creation of all the builds
EXEC_PROGRAM(mkdir ARGS -p ${CMAKE_CURRENT_SOURCE_DIR}/build OUTPUT_VARIABLE NULL)
EXEC_PROGRAM(mkdir ARGS -p ${CMAKE_CURRENT_SOURCE_DIR}/build/Linux32 OUTPUT_VARIABLE NULL)
EXEC_PROGRAM(mkdir ARGS -p ${CMAKE_CURRENT_SOURCE_DIR}/build/Linux64 OUTPUT_VARIABLE NULL)
EXEC_PROGRAM(mkdir ARGS -p ${CMAKE_CURRENT_SOURCE_DIR}/build/Win32 OUTPUT_VARIABLE NULL)
EXEC_PROGRAM(mkdir ARGS -p ${CMAKE_CURRENT_SOURCE_DIR}/build/Wiz OUTPUT_VARIABLE NULL)
EXEC_PROGRAM(mkdir ARGS -p ${CMAKE_CURRENT_SOURCE_DIR}/build/Xcode OUTPUT_VARIABLE NULL)

PROJECT(commandergenius)

# main includes
INCLUDE_DIRECTORIES(optional-includes/generated)
INCLUDE_DIRECTORIES(src)

AUX_SOURCE_DIRECTORY(src ROOT_S)
AUX_SOURCE_DIRECTORY(src/common COMMON_S)
AUX_SOURCE_DIRECTORY(src/common/Menu MENU_S)
AUX_SOURCE_DIRECTORY(src/dialog DIALOG_S)
AUX_SOURCE_DIRECTORY(src/engine ENGINE_S)
AUX_SOURCE_DIRECTORY(src/engine/galaxy GALAXY_S)
AUX_SOURCE_DIRECTORY(src/engine/infoscenes INFOSCENES_S)
AUX_SOURCE_DIRECTORY(src/engine/playgame PLAYGAME_S)
AUX_SOURCE_DIRECTORY(src/engine/vorticon VORTICON_S)
AUX_SOURCE_DIRECTORY(src/engine/vorticon/ai AI_S)
AUX_SOURCE_DIRECTORY(src/engine/vorticon/finale FINALE_S)
AUX_SOURCE_DIRECTORY(src/engine/vorticon/playgame VPLAYGAME_S)
AUX_SOURCE_DIRECTORY(src/fileio FILEIO_S)
AUX_SOURCE_DIRECTORY(src/fileio/compression COMPRESSION_S)
AUX_SOURCE_DIRECTORY(src/graphics GRAPHICS_S)
AUX_SOURCE_DIRECTORY(src/graphics/effects EFFECTS_S)
AUX_SOURCE_DIRECTORY(src/hqp HQP_S)
AUX_SOURCE_DIRECTORY(src/scale2x SCALE2X_S)
AUX_SOURCE_DIRECTORY(src/sdl SDL_S)
AUX_SOURCE_DIRECTORY(src/sdl/sound SDLSOUND_S)
AUX_SOURCE_DIRECTORY(src/sdl/sys SDLSYS_S)
AUX_SOURCE_DIRECTORY(src/sdl/video SDLVIDEO_S)
AUX_SOURCE_DIRECTORY(src/vorbis VORBIS_S)

SET(ALL_SRCS ${COMMON_S} ${MENU_S} ${DIALOG_S} ${ENGINE_S} 
	${AI_S} ${GALAXY_S} ${INFOSCENES_S} ${PLAYGAME_S} ${VORTICON_S} ${FINALE_S} ${VPLAYGAME_S} ${FILEIO_S} 
	${COMPRESSION_S} ${GRAPHICS_S} ${EFFECTS_S} ${HQP_S} ${SCALE2X_S} ${SDL_S} ${SDLSOUND_S} ${SDLSYS_S}
	${SDLVIDEO_S} ${ROOT_S})

IF(UNIX)
# Compilation under Linux
	ADD_DEFINITIONS("-c -fmessage-length=0")

	IF(BUILD_TYPE STREQUAL WIN32)
		set(PREFIX /usr/i586-mingw32msvc/include)
		set(CMAKE_INCLUDE_PATH ${PREFIX})
		set(CMAKE_C_COMPILER i586-mingw32msvc-gcc)
		set(CMAKE_CXX_COMPILER i586-mingw32msvc-g++)
		set(CMAKE_FIND_ROOT_PATH ${PREFIX})
		set(CMAKE_INSTALL_PREFIX ${PREFIX})
		SET(BUILD_DIR Win32)
		ADD_DEFINITIONS(-DWIN32)
		ADD_DEFINITIONS(-DTARGET_WIN32)

	ELSEIF(BUILD_TYPE STREQUAL LINUX32)
		ADD_DEFINITIONS("-DTARGET_LNX")

		IF(HAVE_64_BIT)
			ADD_DEFINITIONS(-D__i386__)
			ADD_DEFINITIONS(-m32)
		ELSE(HAVE_64_BIT)
		ENDIF(HAVE_64_BIT)
		SET(BUILD_DIR Linux32)

	ELSEIF(BUILD_TYPE STREQUAL LINUX64)
		ADD_DEFINITIONS("-DTARGET_LNX")
		SET(BUILD_DIR Linux64)
	ELSE(BUILD_TYPE STREQUAL WIN32)
	ENDIF(BUILD_TYPE STREQUAL WIN32)

	SET(OPTIMIZE_COMPILER_FLAG -O3)
ENDIF(UNIX)


# Extra Flags for the compilation
IF (OGG)
	INCLUDE_DIRECTORIES(/usr/include/vorbis)
	ADD_DEFINITIONS(-DOGG)
	SET(ALL_SRCS ${ALL_SRCS} ${VORBIS_S})
ENDIF (OGG)

IF (SDL)
	ADD_DEFINITIONS(-DSDL)

	IF(BUILD_TYPE STREQUAL WIN32)
		INCLUDE_DIRECTORIES(/usr/i586-mingw32msvc/include/SDL)
	ELSE(BUILD_TYPE STREQUAL WIN32)
		INCLUDE_DIRECTORIES(/usr/include/SDL)
	ENDIF(BUILD_TYPE STREQUAL WIN32)
ENDIF (SDL)

IF (OPENGL)
	ADD_DEFINITIONS(-DGL)
ENDIF (OPENGL)

IF(DEBUG)
	ADD_DEFINITIONS(-DDEBUG)
ENDIF(DEBUG)

# Executable definition
ADD_EXECUTABLE(commandergenius ${ALL_SRCS})

# Linking part under Linux
IF(SDL)	
	IF(BUILD_TYPE STREQUAL WIN32)
		TARGET_LINK_LIBRARIES(commandergenius mingw32)
		TARGET_LINK_LIBRARIES(commandergenius SDLmain)
		TARGET_LINK_LIBRARIES(commandergenius SDL)
		TARGET_LINK_LIBRARIES(commandergenius glu32)
		TARGET_LINK_LIBRARIES(commandergenius opengl32)
	ELSEIF(BUILD_TYPE STREQUAL LINUX32)
		IF(HAVE_64_BIT)
			TARGET_LINK_LIBRARIES(commandergenius SDL-1.2)
		ELSE(HAVE_64_BIT)
			TARGET_LINK_LIBRARIES(commandergenius SDL)
		ENDIF(HAVE_64_BIT)
	ELSE(BUILD_TYPE STREQUAL LINUX32)
		TARGET_LINK_LIBRARIES(commandergenius SDL)
	ENDIF(BUILD_TYPE STREQUAL WIN32)
ENDIF(SDL)

IF(BUILD_TYPE STREQUAL LINUX32)
	IF(HAVE_64_BIT)
		SET_TARGET_PROPERTIES(commandergenius PROPERTIES LINK_FLAGS -L/usr/lib32)
		SET_TARGET_PROPERTIES(commandergenius PROPERTIES LINK_FLAGS -m32)
	ENDIF(HAVE_64_BIT)
ENDIF(BUILD_TYPE STREQUAL LINUX32)

IF(BUILD_TYPE STREQUAL WIN32)
	SET_TARGET_PROPERTIES(commandergenius PROPERTIES LINK_FLAGS -L/usr/i586-mingw32msvc/lib)
ENDIF(BUILD_TYPE STREQUAL WIN32)

IF(OPENGL)
	IF(BUILD_TYPE STREQUAL WIN32)
		TARGET_LINK_LIBRARIES(commandergenius glu32)
		TARGET_LINK_LIBRARIES(commandergenius opengl32)
	ELSE(BUILD_TYPE STREQUAL WIN32)
		TARGET_LINK_LIBRARIES(commandergenius GL)
	ENDIF(BUILD_TYPE STREQUAL WIN32)
ENDIF(OPENGL)

IF(OGG)
	TARGET_LINK_LIBRARIES(commandergenius vorbisfile vorbis)
	IF(BUILD_TYPE STREQUAL WIN32)
		TARGET_LINK_LIBRARIES(commandergenius ogg)
	ENDIF(BUILD_TYPE STREQUAL WIN32)
ENDIF(OGG)

# The Windows Version has an icon in the executable
IF(BUILD_TYPE STREQUAL WIN32)
	SET_TARGET_PROPERTIES(commandergenius PROPERTIES LINK_FLAGS ${CMAKE_CURRENT_SOURCE_DIR}/src/CGLogo.o)
	MESSAGE( "Will build with the CG-Icon for Windows" )
ENDIF(BUILD_TYPE STREQUAL WIN32)

# Set binary(executable) file name. In Windows this filename needs the exe extension
IF(BUILD_TYPE STREQUAL WIN32)
	SET_TARGET_PROPERTIES(commandergenius PROPERTIES OUTPUT_NAME "build/${BUILD_DIR}/CGenius.exe")
ELSE(BUILD_TYPE STREQUAL WIN32)
	SET_TARGET_PROPERTIES(commandergenius PROPERTIES OUTPUT_NAME "build/${BUILD_DIR}/CGenius")
ENDIF(BUILD_TYPE STREQUAL WIN32)

IF(NOT DEFINED BUILD_TYPE)
	SET(BUILD_TYPE LINUX32)
	MESSAGE( "WARNING: You did not specify the build type with the -DBUILD_TYPE= Parameter. LINUX32 has been choosen" )
	MESSAGE( "Available Builds are: WIN32, LINUX32, LINUX64, GP2X. WIZ, DINGOO For 64-bit Linux use 'cmake . -DBUILD_TYPE=LINUX64'" )
ENDIF(NOT DEFINED BUILD_TYPE)


MESSAGE( "BUILD_TYPE = ${BUILD_TYPE}" )
MESSAGE( "BUILD_DIR = ${BUILD_DIR}" )
MESSAGE( "DEBUG = ${DEBUG}" )
MESSAGE( "CMAKE_C_COMPILER = ${CMAKE_C_COMPILER}" )
MESSAGE( "CMAKE_C_FLAGS = ${CMAKE_C_FLAGS}" )
MESSAGE( "CMAKE_CXX_COMPILER = ${CMAKE_CXX_COMPILER}" )
MESSAGE( "CMAKE_CXX_FLAGS = ${CMAKE_CXX_FLAGS}" )
MESSAGE( "OPENGL = ${OPENGL}" )
MESSAGE( "OGG = ${OGG}" )
MESSAGE( "64BIT = ${HAVE_64_BIT}" )

